global !p
import os
def get_component_name(fn):
	return fn.split('.')[0]

endglobal

priority 10
snippet im "import smart"
import ${0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/$2/g}} from '$1';
endsnippet

snippet creq "assign a CommonJS-style module to a const"
const ${0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/$2/g}} = require('$1');
endsnippet

### Test ###
snippet imSpec "import spec" bA
import { specs } from 'storybook-addon-specifications';$0
endsnippet

snippet imCT "import component test" bA
import * as tests from './${1:Component Name}.test';$0
endsnippet

snippet test "Test case" b
test(
	'Given ${1:subject} when ${2:event} then ${3:outcome}.',
	() => {
		$0
	}
);
endsnippet

snippet descC "Test Suite for Component" bA
describe(
	'Given ${1:Component Name} component',
	() => {
		$0
	}
);
endsnippet

snippet storyDesc "Test Suite for Component" bA
export const generic = describe('Given ${2:Component Name} component', () => {
$3
});$0
endsnippet

snippet testCC "Test component child" bA
test('when rendered then the component should contain ${2:a }${1:Child Component Name}.', () => {
$3
});$0
endsnippet

snippet warg "With arg"
${1:value} as ${2:arg}${3: and warg$4}
endsnippet

snippet testCA "Test component action" bA
test('when the ${1:Child Component Name} is ${2:interaction} then the ${3:Action} action handler should receive ${4:warg$5}.', () => {
$6
});$0
endsnippet

snippet fail "easy fail" b
expect(true).toBe(false);
endsnippet

### React ###
snippet pureComp "Pure Component" b
import React from 'react';
import PropTypes from 'prop-types';
${0:import './${1:`!p snip.rv = get_component_name(snip.fn)`}.scss';}

const $1 = ({ children }) => (
	<React.Fragment>
		{children}
	</React.Fragment>
);

$1.propTypes = {
	children: PropTypes.node
};

$1.defaultProps = {
	children: null
};

export default $1;
endsnippet

### React ###
snippet classComp "Class Component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';
${0:import './${1:`!p snip.rv = get_component_name(snip.fn)`}.scss';}

class $1 extends Component {
	static propTypes = {
		children: PropTypes.node
	}

	static defaultProps = {
		children: null
	}

	constructor(props) {
		super(props);
		this.state = {};
	}

	render() {
		const { children } = this.props;
		return (
			<React.Fragment>
				{children}
			</React.Fragment>
		);
	}
}

export default $1;
endsnippet

### Storybook ###
snippet stories "Component Stories" b
import React from 'react';
import { storiesOf } from '@storybook/react';
import { withKnobs } from '@storybook/addon-knobs';

import $1 from './${1:`!p snip.rv = get_component_name(snip.fn)`}';

const generateStoryProps = (storyProps = {}) => ({
	...storyProps
});

const stories = storiesOf('$2/$1', module);

stories.addDecorator(withKnobs);

stories.add('render without data', () => (
	 <$1
		 {...generateStoryProps()}
	 />
));
endsnippet

snippet storiesWithTest "Component Stories" b
import React from 'react';
import { storiesOf } from '@storybook/react';
import { specs } from 'storybook-addon-specifications';
import { withKnobs } from '@storybook/addon-knobs';

import $1 from './${1: `!p snip.rv = get_component_name(snip.fn)`}';
import * as tests from './$1.test';

const props = (storyProps = {}) => ({
	...storyProps
});

const stories = storiesOf('$2/$1', module);

stories.addDecorator(withKnobs);

stories.add('render without data', () => {
	specs(() => tests.generic);

	return (
		 <$1
			 {...props()}
		 />
	);
});
endsnippet

snippet imAct "import action" bA
import { action } from '@storybook/addon-actions';
endsnippet

snippet pAct "new action" bA
${1:name}: action('$1'),$0
endsnippet

snippet bKnob "boolean knob" bA
${1:name}: boolean('$1', $1),$0
endsnippet

snippet nKnob "number knob" bA
${1:name}: number('$1', $1),$0
endsnippet

snippet debugger "denugger" bA
debugger; // eslint-disable-line
endsnippet

snippet AT "ActionType" b
export const ${1:ACTION} = '$1';
endsnippet

snippet ex "module.exports"
module.exports = $1;
endsnippet
